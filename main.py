import turtle

t = turtle
t.speed(100)  #sets turtle speed to 100 (max)
wn = turtle.Screen()  #adds a turtle screen
wn.bgcolor('light gray')  #sets background screen to light gray
t.shape('square')  #makes turtle a square

print('Enter a to access part one.')
print('Enter b to access part two. (fire flower)')
answer = input()
print()
#list that contains the binary code to draw the original gradient
gradient = [['11111111', '11111111', '11111111'], ['11101011', '11111010', '11101011'], ['11010110', '11110101', '11010110'],['11000010', '11110000', '11000010'], ['10101101', '11101011', '10101101'], ['10011001', '11100110', '10011001'], ['10000101', '11100000', '10000101'], ['01110000', '11011011', '01110000'], ['01011100', '11010110', '01011100'],['01000111', '11010001', '01000111'], ['00110011', '11001100', '00110011'], ['00101110', '10111000', '00101110'], ['00101001', '10100011', '00101001'],['00100100', '10001111', '00100100'], ['00011111', '01111010', '00011111'], ['00011001', '01100110', '00011001'], ['00010100', '01010010', '00010100'], ['00001111', '00111101', '00001111'], ['00001010', '00101001', '00001010'], ['00000101', '00010100', '00000101'], ['00000000', '00000000','00000000']]
temp = [] #temporary list for part 1

#Lists for each row to draw orignal gradient for part 2
gr_1 = [['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'],['11111111', '11111111',  '11111111'], ['00000000', '00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000', '00000000'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111']]
gr_2 = [['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111']]
gr_3 = [['11111111', '11111111', '11111111'], ['00000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11100000', '10000000', '00000000'], ['11100000', '10000000', '00000000'], ['11100000', '10000000', '00000000'], ['11100000', '10000000', '00000000'], ['11100000', '10000000', '00000000'], ['11100000', '10000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['11111111', '11111111', '11111111']]
gr_4 = [['00000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11100000', '10000000', '00000000'], ['11100000', '10000000', '00000000'], ['11100000', '11000000', '00000000'], ['00000000', '00000000', '00000000'], ['11100000', '11000000', '00000000'], ['11100000', '11000000', '00000000'], ['00000000', '00000000', '00000000'], ['11100000', '11000000', '00000000'], ['11100000', '10000000', '00000000'], ['11100000', '10000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['00000000', '00000000', '00000000']]
gr_5 = [['00000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11100000', '10000000', '00000000'], ['11100000', '11000000', '00000000'], ['11111111', '11111111', '11111111'], ['00000000', '00000000', '00000000'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['00000000', '00000000', '00000000'], ['11111111', '11111111', '11111111'], ['11100000', '11000000', '00000000'], ['11100000', '10000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['00000000', '00000000', '00000000']]
gr_6 = [['00000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11100000', '10000000', '00000000'], ['11100000', '10000000', '00000000'], ['11100000', '11000000', '00000000'], ['00000000', '00000000', '00000000'], ['11100000', '11000000', '00000000'], ['11100000', '11000000', '00000000'], ['00000000', '00000000', '00000000'], ['11100000', '11000000', '00000000'], ['11100000', '10000000', '00000000'], ['11100000', '10000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['00000000', '00000000', '00000000']]
gr_7 = [['11111111', '11111111', '11111111'], ['00000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11100000', '10000000', '00000000'], ['11100000', '10000000', '00000000'], ['11100000', '10000000', '00000000'], ['11100000', '10000000', '00000000'], ['11100000', '10000000', '00000000'], ['11100000', '10000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['11111111', '11111111', '11111111']]
gr_8 = [['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['11000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111']]
gr_9 = [['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111']]
gr_10 = [['11111111', '11111111', '11111111'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['00000000', '00000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '00000000', '00000000'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['00000000', '00000000', '00000000'], ['00000000', '000000000', '00000000'], ['11111111', '11111111', '11111111']]
gr_11 = [['00000000', '00000000', '00000000'], ['00000000', '11000000', '00000000'], ['00000000', '11000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['11111111', '11111111', '11111111'], ['00000000', '00000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '00000000', '00000000'], ['11111111', '11111111', '11111111'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '11000000', '00000000'], ['00000000', '11000000', '00000000'], ['00000000', '00000000', '00000000']]
gr_12 = [['00000000', '00000000', '00000000'], ['00000000', '11000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '11000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '11000000', '00000000'], ['00000000', '11000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '11000000', '00000000'], ['00000000', '00000000', '00000000']]
gr_13 = [['00000000', '00000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '11000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '11000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '00000000', '00000000'],['00000000', '11000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '11000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '00000000', '00000000']]
gr_14 = [['11111111', '11111111', '11111111'], ['00000000', '00000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '11000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '11000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '00000000', '00000000'], ['11111111', '11111111', '11111111']]
gr_15 = [['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '10000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111']]
gr_16 = [['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['00000000', '00000000', '00000000'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111'], ['11111111', '11111111', '11111111']]
temp = [] #temporary list that modifies gradient

#Procedure 1 - Draws the original gradient
def square():
  t.pendown()
  for x in range(4):  #repeats the steps below 4 times
    t.fd(20)
    t.right(90)

def row(rgb_list):  #adds a new row once the turtle finishes a row
  t.penup()
  t.left(180)
  t.fd(len(rgb_list) * 20)
  t.left(90)
  t.fd(20)
  t.left(90)

def tetris_piece_1(gradient):
  t.penup()
  count = 0
  while count < 12:  #makes 12 rows
    for k in gradient:
      rgb = [int(i, 2) for i in k]
      t.color(rgb[0], rgb[1], rgb[2])  #makes a color based on each byte in gradient
      t.begin_fill()
      square()
      t.pencolor(rgb[0], rgb[1], rgb[2])
      t.end_fill()
      t.fd(20)
    row(gradient)
    count = count + 1

def tetris_piece_2(gradient):
  t.penup()
  count = 0
  while count < 1:  #makes 12 rows
    for k in gradient:
      rgb = [int(i, 2) for i in k]
      t.color(rgb[0], rgb[1], rgb[2])  #makes a color based on each byte in gradient
      t.begin_fill()
      square()
      t.pencolor(rgb[0], rgb[1], rgb[2])
      t.end_fill()
      t.fd(20)
    row(gradient)
    count = count + 1
#---------------------
#Procedure 2 - Removes ones bit from each byte in the RGB
def remove_one_bit(gradient, temp):
  for i in gradient:
    temp.append([i[0][:-1], i[1][:-1], i[2][:-1]])  #removes last character from each bit
  return temp
#---------------------
#Procedure 3 - Adds 01 to each byte in the RGB
def add_01(temp):
  temp = [['11111111', '01111111', '11011111'], ['11110111', '10101101', '11111010'], ['01111010', '11011101', '01100111'], ['11010101', '11010110', '00111000'], ['01001111', '10000011', '10000100'], ['11010110', '10111101', '01101101'], ['01101011', '00110010', '11110011'], ['00110011', '00101100', '00101011'], ['11000000', '11000010', '10101110'], ['00001110', '11011010', '11100000'], ['10101110', '00111010', '11001010'], ['11100010', '10001110', '11101000'], ['10101000', '11101001', '10011011'], ['10011000', '10011001', '10100101'], ['11001101', '11000010', '01011100'], ['10010100', '10110100', '01101001'], ['01001010', '01001000', '11000111'], ['10100100', '10001000', '11111010'], ['11110100', '10001111', '10100011'], ['00101011', '00110010', '00110010'], ['10001010', '00101010', '01001000'], ['10100010', '00011110', '10011110'], ['10100001', '11101000', '01010010'], ['01010010', '10000101', '00100000'], ['10101000', '10100010', '00001010'], ['10000000', '00100000', '00001000']]
  return temp
#--------------------
#Procedure 4 - Converts to RG Dichrome Palette
def rg_dichrome(gradient):
  t.penup()
  count = 0
  while count < 12:  #makes 12 rows for the gradient
    for k in gradient:
      rgb = [int(i, 2) for i in k]
      t.color(rgb[0], rgb[1], 0)  #takes the colors from red and green and leaves 0 for blue colors
      t.begin_fill()
      square()
      t.pencolor(rgb[0], rgb[1], 0)
      t.end_fill()
      t.fd(20)
    row(gradient)
    count = count + 1
  return gradient

def rg_dichrome_2(gradient): #RG dichrome used for part two
  t.penup()
  count = 0
  while count < 1:  #makes 12 rows for the gradient
    for k in gradient:
      rgb = [int(i, 2) for i in k]
      t.color(rgb[0], rgb[1], 0)  #takes the colors from red and green and leaves 0 for blue colors
      t.begin_fill()
      square()
      t.pencolor(rgb[0], rgb[1], 0)
      t.end_fill()
      t.fd(20)
    row(gradient)
    count = count + 1
  return gradient
#--------------------
#Procedure 5 - Converts to GB Dichrome Palette
def gb_dichrome(gradient):
  t.penup()
  count = 0
  while count < 12:
    for k in gradient:
      rgb = [int(i, 2) for i in k]
      t.color(0, rgb[1], rgb[2])  #takes colors from green and blue and leaves 0 for red colors
      t.begin_fill()
      square()
      t.pencolor(0, rgb[1], rgb[2])
      t.end_fill()
      t.fd(20)
    row(gradient)
    count = count + 1
  return gradient

def gb_dichrome_2(gradient): #gb dichrome used for part 2
  t.penup()
  count = 0
  while count < 1:
    for k in gradient:
      rgb = [int(i, 2) for i in k]
      t.color(0, rgb[1], rgb[2])  #takes colors from green and blue and leaves 0 for red colors
      t.begin_fill()
      square()
      t.pencolor(0, rgb[1], rgb[2])
      t.end_fill()
      t.fd(20)
    row(gradient)
    count = count + 1
  return gradient
#--------------------
#Procedure 6 - Converts to RB Dichrome Palette
def rb_dichrome(gradient):
  t.penup()
  count = 0
  while count < 12:
    for k in gradient:
      rgb = [int(i, 2) for i in k]
      t.color(rgb[0], 0, rgb[2])  #takes colors from red and blue and leaves 0 for green colors
      t.begin_fill()
      square()
      t.pencolor(rgb[0], 0, rgb[2])
      t.end_fill()
      t.fd(20)
    row(gradient)
    count = count + 1
  return gradient

def rb_dichrome_2(gradient): #RB dichrome used for part two
  t.penup()
  count = 0
  while count < 1:
    for k in gradient:
      rgb = [int(i, 2) for i in k]
      t.color(rgb[0], 0, rgb[2])  #takes colors from red and blue and leaves 0 for green colors
      t.begin_fill()
      square()
      t.pencolor(rgb[0], 0, rgb[2])
      t.end_fill()
      t.fd(20)
    row(gradient)
    count = count + 1
  return gradient
#Choice 1
if answer == 'a':
  print('Enter 1 to draw the original gradient.')
  print('Enter 2 to remove one bit from each byte in the RGB.')
  print('Enter 3 to add 01 to each byte in the RGB.')
  print('Enter 4 to convert to RG Dichrome Palette.')
  print('Enter 5 to convert to GB Dichrome Palette')
  print('Enter 6 to convert to RB Dichrome Palette.')
  choice = int(input())  #takes user input

  if choice == 1:
    wn.colormode(255)
    t.penup()
    t.goto(-210, 120)
    square()
    tetris_piece_1(gradient)
    print()
    print(gradient)
    print(len(gradient))
#--------------------
#Choice 2
  elif choice == 2:  #makes a gradient with 1 less bit for each bye from gradient
    wn.colormode(255)
    t.penup()
    t.goto(-210, 120)
    square()
    remove_one_bit(gradient, temp)
    tetris_piece_1(temp)
    print()
    print(temp) #draws gradient with 1 less bit in each byte after drawing gradient
#--------------------
#Choice 3
  elif choice == 3:  #prints out the list after appending '01' to the last bit in each byte from gradient. Since the code is pushed forward, the drawing is going to look weird
    wn.colormode(255)
    t.penup()
    t.goto(-260, 120)
    square()
    print(tetris_piece_1(add_01(temp)))
    print(add_01(temp))
#--------------------
#Choice 4
  elif choice == 4:  #draws the red and green dichrome
    wn.colormode(255)
    t.penup()
    t.goto(-210, 120)
    square()
    rg_dichrome(gradient)
#--------------------
#Choice 5
  elif choice == 5:  #draws the green and blue dichrome
    wn.colormode(255)
    t.penup()
    t.goto(-210, 120)
    gb_dichrome(gradient)
#--------------------
#Choice 6
  elif choice == 6:  #draws the red and blue dichrome
    wn.colormode(255)
    t.penup()
    t.goto(-210, 120)
    rb_dichrome(gradient)
#Else
  else:  #prints an error message if the user types in anything besides the numbers from 1 to 6
    print('You have made a typing error. Please rerun the program.')

    #Part Two
elif answer == 'b':
  print('Enter 1 to draw the original gradient.')
  print('Enter 2 to convert to RG Dichrome Palette.')
  print('Enter 3 to convert to GB Dichrome Palette')
  print('Enter 4 to convert to RB Dichrome Palette.')
  choice = int(input())  #takes user input
  wn.colormode(255)
  t.penup()
  t.goto(-160, 150)

  if choice == 1: #draws original fire flower drawing
    square()
    tetris_piece_2(gr_1)
    tetris_piece_2(gr_2)
    tetris_piece_2(gr_3)
    tetris_piece_2(gr_4)
    tetris_piece_2(gr_5)
    tetris_piece_2(gr_6)
    tetris_piece_2(gr_7)
    tetris_piece_2(gr_8)
    tetris_piece_2(gr_9)
    tetris_piece_2(gr_10)
    tetris_piece_2(gr_11)
    tetris_piece_2(gr_12)
    tetris_piece_2(gr_13)
    tetris_piece_2(gr_14)
    tetris_piece_2(gr_15)
    tetris_piece_2(gr_16)
  elif choice == 2: #draws fire flower with RG dichrome
    rg_dichrome_2(gr_1)
    rg_dichrome_2(gr_2)
    rg_dichrome_2(gr_3)
    rg_dichrome_2(gr_4)
    rg_dichrome_2(gr_5)
    rg_dichrome_2(gr_6)
    rg_dichrome_2(gr_7)
    rg_dichrome_2(gr_8)
    rg_dichrome_2(gr_9)
    rg_dichrome_2(gr_10)
    rg_dichrome_2(gr_11)
    rg_dichrome_2(gr_12)
    rg_dichrome_2(gr_13)
    rg_dichrome_2(gr_14)
    rg_dichrome_2(gr_15)
    rg_dichrome_2(gr_16)
  elif choice == 3: #draws fire flower with GB dichrome
    gb_dichrome_2(gr_1)
    gb_dichrome_2(gr_2)
    gb_dichrome_2(gr_3)
    gb_dichrome_2(gr_4)
    gb_dichrome_2(gr_5)
    gb_dichrome_2(gr_6)
    gb_dichrome_2(gr_7)
    gb_dichrome_2(gr_8)
    gb_dichrome_2(gr_9)
    gb_dichrome_2(gr_10)
    gb_dichrome_2(gr_11)
    gb_dichrome_2(gr_12)
    gb_dichrome_2(gr_13)
    gb_dichrome_2(gr_14)
    gb_dichrome_2(gr_15)
    gb_dichrome_2(gr_16)
  elif choice == 4: #draws fire flower with RB dichrome
    rb_dichrome_2(gr_1)
    rb_dichrome_2(gr_2)
    rb_dichrome_2(gr_3)
    rb_dichrome_2(gr_4)
    rb_dichrome_2(gr_5)
    rb_dichrome_2(gr_6)
    rb_dichrome_2(gr_7)
    rb_dichrome_2(gr_8)
    rb_dichrome_2(gr_9)
    rb_dichrome_2(gr_10)
    rb_dichrome_2(gr_11)
    rb_dichrome_2(gr_12)
    rb_dichrome_2(gr_13)
    rb_dichrome_2(gr_14)
    rb_dichrome_2(gr_15)
    rb_dichrome_2(gr_16)
  else: #prints a typing error if user doesn't type in a number besides 1 to 4
    print('You have made a typing error. Please rerun the program.')
else: #prints a typing error if the user doesn't type in an answer besides 'a' or 'b'
  print('You have made a typing error. Please rerun the program.')